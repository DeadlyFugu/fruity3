import builtin as builtin
// todo: builtin should lock itself?
builtin.lock! builtin

// get default parents
1 builtin.getp >>Number
#a builtin.getp >>Symbol
'a' builtin.getp >>String
{} builtin.getp >>Closure
nil builtin.getp >>Oddball
builtin.list builtin.getp >>List
'' builtin.blobenc builtin.getp >>Blob
@a 1 builtin.getp >>Argument
{.} catch {} builtin.getp >>Exception
&x builtin.getp >>Reference

dragon: :{}
this as $dragon // popped later

dragon.pop: {x =>}
dragon.dup: {x => $x $x}
dragon.swap: {(. .)}
dragon.clear: {map $pop}
dragon.top: {x => clear $x}
dragon.size: $builtin.stksize
dragon.empty: {size is 0}
dragon.under: {size - 1 (dot . .)}
dragon.reverse: $builtin.reverse

dragon.pop

dragon.dump: {list dup >>l open print($l open size >>n map $rep join ' ' cat('(' $n ') [' . ']'))}
dragon.sort: $builtin.sort

dragon.add: {o => + $o}
dragon.sub: {o => - $o}
dragon.mul: {o => * $o}
dragon.div: {o => / $o}
dragon.pow: {o => ^ $o}
dragon.mod: {o => % $o}
dragon.divmod: {a b => $a / $b int dup * $b $a swap sub}

dragon.str: {dup ?._str then {._str} else $builtin.valstr}
dragon.rep: {dup ?._rep then {._rep} else $str}

dragon.print: {str '\n' builtin.strcat(..) builtin.print}
dragon.printw: {str builtin.print}
dragon.prompt: $builtin.prompt
dragon.input: {'' prompt}

dragon.parse: {root builtin.parse}
dragon.eval: {parse apply}

dragon.apply: {f => f}
dragon.cat: {map $str builtin.strcat}
dragon.mkstr: $builtin.strmk
dragon.char: {
    dup type
    is #number then {mkstr(.)}
    else $builtin.strunmk
}
dragon.sym: $builtin.sym

dragon.getv: $builtin.getv
dragon.setv: $builtin.setv
dragon.bindv: $builtin.bindv
dragon.hasv: $builtin.hasv
dragon.refv: {:{self key =>} as $Reference}
dragon.lsv: $builtin.lsv
dragon.hasb: $builtin.hasb
dragon.lsb: $builtin.lsb
dragon.getp: $builtin.getp
dragon.setp: {b => as $b pop}
dragon.type: $builtin.type
dragon.lock: $builtin.lock

dragon.bool: {then true else false}
dragon.not: {then false else true}
dragon.any: {reverse fold {a b => $b then $b else $a}}
dragon.all: {reverse fold {a b => $b then $a else $b}}

dragon.int: {._int}
dragon.float: {._float}
dragon.abs: {._abs}
dragon.negate: {0 - ()}

dragon.open: {._open}
dragon.len: {._len}

dragon.match: {f =>
    ?f.match then {dup f.match}
    else {dup is $f or {$f is default}}
}
dragon.switch: {
    reverse >>val
    until {
        $val swap match swap pop
        dup else {swap pop}
        or $empty
    }
    empty else {top apply}
}
dragon.chain: {
    reverse
    until {empty or $apply} do $pop
    empty else {top apply}
}

dragon.enumerate: {
    n: 0
    map {$n dup + 1 >n swap}
}

Number._float: {self}
Number._int: {self 16 builtin.math1}
Number._eq: {is self}
Number._visit: {.number(self)}
Number._abs: {self < 0 then {self negate} else self}

String._float: {self builtin.strtof}
String._int: {self builtin.strtoi}
String._open: {self builtin.stropen}
String.chars: {self builtin.strunmk}
// todo: some short form for `dup is X then {pop Y}`?
//       X --> Y? X into Y?
// also some 'match' global? for use in into, switch
// into: {match then {pop Y}}
// X match! Y -> $X Y.match (if ?Y.match)
//            -> $X is $Y   (otherwise)
String.get: {i => self $i $i + 1 dup is 0 then {pop nil} builtin.strsub}
// todo: better name than sub? (i think i had one down in one of the
// ideas docs?)
String.sub: {begin end => self $begin $end builtin.strsub}
String.find: {o => self $o builtin.strstr}
String.count: {o => top($o self.split size - 1)}
String.contains: {o => self.find($o) is nil not}
String.escape: {self builtin.stresc}
String.unescape: {self builtin.strunesc}
String.quote: {builtin.strcat('\'' self '\'')}
String.split: {delim => self $delim builtin.strsplit}
String.splitfirst: {delim =>
    self.find($delim) >>n
    $n then {self.sub(0 $n) self.sub($delim len + $n nil)}
    else {self ''}
}
// String.splitws
String.trim: {self builtin.strtrim}
String.replace: {a b => ($a self.split join $b)}
String.drop: {n => self $n nil builtin.strsub}
String.droptail: {n => self 0 $n negate builtin.strsub}
String.startswith: {s => s._len negate self.droptail is $s}
String.endswith: {s => s._len negate self.drop is $s}
String.upper: {self builtin.strupper}
String.lower: {self builtin.strlower}
String.isupper: {self builtin.strisup}
String.islower: {self builtin.strislo}
String.blob: {self builtin.strblob}
String._len: {self builtin.strlen}
String._rep: {self builtin.valstr}
String._str: {self}
String._visit: {.string(self)}
String._eq: {is self}
String._join: {map self empty else $pop cat}

Symbol._eq: {is self}
Symbol.name: {self str .drop(1)}
Symbol._visit: {.symbol(self)}

Closure.apply: {self}
Closure.match: $Closure.apply
Closure._visit: {.closure($self)}

Oddball._visit: {.oddball(self)}

dragon.list: $builtin.list
List._open: {self builtin.lstopen}
List.push: {o => self $o builtin.lstpush}
List.pop: {self builtin.lstpop}
List.peek: {self -1 builtin.lstget}
List.get: {i => self $i builtin.lstget}
List.set: {i v => self $i $v builtin.lstset}
List._len: {self builtin.lstsize}
List.empty: {self builtin.lstsize is 0}
List.change: {self builtin.lstchange}
List.append: {size >>n (self builtin.lstopen dot $n self builtin.lstchange)}
List.prepend: {self builtin.lstopen self builtin.lstchange}
List.shift: {(self builtin.lstopen size - 1 (dot . self builtin.lstchange))}
List.unshift: {self.prepend(.)}
List.sub: {begin end => list(self $begin $end builtin.lstsub)}
List.subopen: {begin end => self $begin $end builtin.lstsub}
List.insert: {i v => self.change(
    self.subopen(0 $i)
    $v
    self.subopen($i nil)
)}
List.with: {f => self.change(self._open f)}
List.findall: {k =>
    i: 0
    self._open map {$k match swap pop then $i $i + 1 >i}
}
List.find: {
    top(. self.findall nil under)
}
List.contains: {v => self.find($v) is nil not}
List._visit: {.list(self)}

Blob.decode: {self swap builtin.blobdec}
Blob.sub: {begin end => self $begin $end builtin.blobsub}
Blob.hex: {mkstr(
    hexdigit: {dup >= 10 then {- 10 + char('a')} else {+ char('0')}}
    self open map {16 divmod hexdigit swap hexdigit swap}
)}
Blob._visit: {.blob(self)}
Blob._open: {self builtin.blobopen}
// todo: decode from hex string if provided?
dragon.blob: $builtin.blobmk
dragon.encode: $builtin.blobenc

dragon.extend: { a b =>
    ($b lsv map {s => bindv($a $s $b $s getv)})
}

$dragon >>dragon.root

dragon.throw: { s =>
    $s type = #symbol then {
        $s switch( $s
            #unbound 'key unbound'
            #underflow 'expected value(s) on stack'
            #type 'expected different type'
            #invalid 'invalid operation'
            #internal 'internal error'
            default {s.name}
        ) builtin.throw
    } else {
        #error $s builtin.throw
    }
}
dragon.throwx: { key msg =>
    $key $msg builtin.throw
}
dragon.safe: {f => {f true} catch {pop false}}

Reference._str: {
    cat('<reference>')
}
Reference.get: {
    $self.self $self.key getv
}
Reference.set: {
    setv($self.self $self.key .)
}
Reference.bind: {
    bindv($self.self $self.key .)
}
Reference.addlocal: {
    self.get + () self.set
}

dragon.argparse: {
    a: :{}
    until {empty or {dup getp is $Argument not}}
    do {bindv($a . open)}
    $a
}
Argument._open: {
    $self.key $self.value
}
Argument._visit: {.argument(self)}

dragon.exit: {0 builtin.exit}

// todo: copy/clone

// todo: should sys be a separate module?
dragon.sys: :{}
dragon.sys.version: (0 builtin.sysctl)
dragon.sys.args: list(1 builtin.sysctl)
dragon.sys.uname: :{
    sysname: nodename: release: version: machine: (2 builtin.sysctl)
}
dragon.sys.exec: {s => $s 3 builtin.sysctl}

dragon.disasm: $builtin.disasm

_export: $dragon
lock! this
lock! $dragon
lock! $dragon.sys
lock! $Number
lock! $Symbol
lock! $String
lock! $Closure
lock! $Oddball
lock! $List
lock! $Blob
lock! $Argument
lock! $Exception
lock! $Reference
