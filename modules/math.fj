import builtin

math: :{}

// -- Constants -- //
math.e:  2.7182818284590452354
math.pi: 3.14159265358979323846

// -- Angles -- //
_deg2rad: ($math.pi / 180)
_rad2deg: (180 / $math.pi)
math.todeg: {x => * $_rad2deg}
math.torad: {x => * $_deg2rad}

// -- Trigonometric Fns -- //
math.sin: {0 builtin.math1}
math.cos: {1 builtin.math1}
math.tan: {2 builtin.math1}
math.asin: {3 builtin.math1}
math.acos: {4 builtin.math1}
math.atan: {5 builtin.math1}
math.atan2: {0 builtin.math2}

// -- Exponnential/Logarithmic Fns -- //
math.exp: {6 builtin.math1}
math.exp2: {7 builtin.math1}
math.ln: {8 builtin.math1}
math.log10: {9 builtin.math1}
math.log2: {10 builtin.math1}
math.log: {1 builtin.math2}

// -- Whatever sqrt() Is -- //
math.sqrt: {11 builtin.math1}
math.rsqrt: {12 builtin.math1}
math.square: {dup mul}

// -- Rounding Fns -- //
math.floor: {13 builtin.math1}
math.round: {14 builtin.math1}
math.ceil: {15 builtin.math1}
math.trunc: {16 builtin.math1}
math.fract: {17 builtin.math1}
math.sign: {18 builtin.math1}

// -- Range Fns -- //
math.lerp: {x y f => $f * ($y - $x) + $x}
math.smooth: {x y f => dup dup 3 - (. * 2) mul mul math.lerp}
math.clamp: {math.median(...)}
math.saturate: {math.clamp(. 0 1)}
math.range: {begin end step =>
    ($end <> $begin) * $step dup >step
    != 0 then {
        $begin dup - $end abs / $step
        repeat {$begin + $step dup >begin}
    }
}

// -- Set Fns -- //
math.sum: {fold $add}
math.product: {fold $mul}
math.min: {fold {a b => $a < $b then $a else $b}}
math.max: {fold {a b => $a > $b then $a else $b}}
math.mean: {size >>n math.sum / $n}
math.median: {sort size / 2 math.floor repeat $pop top}

// -- Random Fns -- //
math.rand: {builtin.rand % 10,000 / 10,000}
math.rand_range: {begin end => builtin.rand % ($end - $begin + 1) + $begin}

// -- Floating Point -- //
math.isnan: {19 builtin.math1 = 0}
math.isinf: {19 builtin.math1 = 1}

// -- Complex Type -- //
// todo: this should probably be in a separate source file eventually
Complex: :{}
math.complex: {:{r i =>} as $Complex}
// todo: maybe just omit _ prefix from metamethods?
Complex._add: {other => math.complex(
    $self.r + $other.r
    $self.i + $other.i
)}
Complex._mul: {other => math.complex(
    ($self.r * $other.r) - ($self.i * $other.i)
    ($self.r * $other.i) + ($self.i * $other.r)
)}
Complex._abs: {
    math.square($self.r) + math.square($self.i) math.sqrt
}
Complex._str: {
    cat($self.r '+' $self.i 'i')
}
Complex._open: {$self.r $self.i}
Complex._visit: {.openable('math.complex' self)}

_export: $math
