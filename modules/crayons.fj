
crayons: :{}

escape: char(27)
wrap: {s n => cat($escape '[' $n 'm' $s $escape '[0m')}

crayons.reset: {cat($escape '[0m')}

crayons.bold:    {1 wrap}
crayons.faint:   {2 wrap}
crayons.invert:  {7 wrap}

crayons.black:   {30 wrap}
crayons.red:     {31 wrap}
crayons.green:   {32 wrap}
crayons.yellow:  {33 wrap}
crayons.blue:    {34 wrap}
crayons.magenta: {35 wrap}
crayons.cyan:    {36 wrap}
crayons.white:   {37 wrap}

crayons.bg: :{}
crayons.bg.black:   {40 wrap}
crayons.bg.red:     {41 wrap}
crayons.bg.green:   {42 wrap}
crayons.bg.yellow:  {43 wrap}
crayons.bg.blue:    {44 wrap}
crayons.bg.magenta: {45 wrap}
crayons.bg.cyan:    {46 wrap}
crayons.bg.white:   {47 wrap}

rainbow: list(
    $crayons.red $crayons.yellow $crayons.green
    $crayons.cyan $crayons.blue $crayons.magenta)
crayons.rainbow: {(. open enumerate zip {swap % 6 rainbow.get apply} cat)}

colorizer: :{}
colorizer.number: $crayons.yellow
colorizer.symbol: $crayons.blue
colorizer.string: {rep crayons.green}
colorizer.closure: $crayons.red // todo: impl
colorizer.oddball: $crayons.yellow
colorizer.list: {
    (. open map $crayons.rep join ' ')
    cat(crayons.cyan! 'list' '(' . ')')
}
colorizer.context: { ctx => (
    $ctx lsv sort map { k =>
        crayons.red! cat(k.name ':')
        crayons.rep(getv($ctx $k))
    }
    join ' ' cat(':{' . '}')
)}
colorizer.argument: { a =>
    cat(crayons.yellow! cat('@' a.key.name) ' ' crayons.rep! $a.value)
}
// todo: ctor reference for openable would be preferable
colorizer.openable: { swap >>ctor
    (. open map $crayons.rep join ' ')
    cat(crayons.cyan! $ctor '(' . ')')
}
colorizer.root: {pop crayons.yellow! 'root'}

// todo: if passed a parent object (e.g. String or Argument) it will
//       call the visit method on it. is there any way to distinguish
//       the two?
// todo: somehow detect self-referential loops
crayons.rep: {
    dup ?._visit
        then {._visit($colorizer)}
        else {colorizer.context}
}

crayons.heatmap: {
    rainbow.get(. * 6 % 6 int) apply
}

_export: $crayons

?_main then {
    title: crayons.rainbow! 'Crayons'
    print('Welcome to ' $title '!' cat)
    print(
        $title ' is a ' crayons.yellow! 'module'
        ' to ' crayons.cyan! 'colorize'
        ' your ' crayons.magenta! 'text' '!' cat)
    
    print('You can use it to wrap your text like so:')
    print('> crayons.blue(\'helo wold!\') print')
    print(crayons.blue! 'helo wold!')
    
    print('\nExamples of different formatting below:')

    $crayons lsv
    // todo: fix filter and join
    excluding: list(#reset #rep #heatmap #bg)
    filter {excluding.contains not}
    sort map { k =>
        f: getv($crayons $k)
        f('crayons.' k.name cat)
        hasv($crayons.bg $k) then {
            f: getv($crayons.bg $k)
            f('crayons.bg.' k.name cat) crayons.black
            cat(.. '\t' swap)
        }
        print
    }
}
