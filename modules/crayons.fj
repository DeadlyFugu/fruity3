
crayons: :{}

escape: char(27)
wrap: {s n => cat($escape '[' $n 'm' $s $escape '[0m')}

crayons.reset: {cat($escape '[0m')}

crayons.bold:    {1 wrap}
crayons.faint:   {2 wrap}
crayons.invert:  {7 wrap}

crayons.black:   {30 wrap}
crayons.red:     {31 wrap}
crayons.green:   {32 wrap}
crayons.yellow:  {33 wrap}
crayons.blue:    {34 wrap}
crayons.magenta: {35 wrap}
crayons.cyan:    {36 wrap}
crayons.white:   {37 wrap}

crayons.bg: :{}
crayons.bg.black:   {40 wrap}
crayons.bg.red:     {41 wrap}
crayons.bg.green:   {42 wrap}
crayons.bg.yellow:  {43 wrap}
crayons.bg.blue:    {44 wrap}
crayons.bg.magenta: {45 wrap}
crayons.bg.cyan:    {46 wrap}
crayons.bg.white:   {47 wrap}

rainbow: list(
    $crayons.red $crayons.yellow $crayons.green
    $crayons.cyan $crayons.blue $crayons.magenta)
crayons.rainbow: {(. open enumerate zip {swap % 6 rainbow.get apply} cat)}

colorizer: :{}
colorizer.number: $crayons.yellow
colorizer.symbol: $crayons.blue
colorizer.string: {rep crayons.green}
colorizer.closure: { f =>
    safe! {$f disasm}
    then {map {self.unit} join ' ' cat('{' . '}')}
    else {crayons.faint! '<native closure>'}
}
colorizer.oddball: $crayons.yellow
colorizer.list: {self.openable('list' .)}
colorizer.blob: {self.openable('blob' .)}
colorizer.context: { ctx => (
    $ctx lsv sort map { k =>
        crayons.red! cat(k.name ':')
        crayons.rep(getv($ctx $k))
    }
    join ' ' cat(':{' . '}')
)}
colorizer.argument: { a =>
    cat(crayons.yellow! cat('@' a.key.name) ' ' crayons.rep! $a.value)
}
// todo: ctor reference for openable would be preferable
colorizer.openable: { swap >>ctor
    (. open map $crayons.rep join ' ')
    cat(crayons.cyan! $ctor '(' . ')')
}
colorizer.root: {pop crayons.yellow! 'root'}
colorizer.unit: { u =>
    _chain: {(
        . open map {
            dup is default then {pop ''} else {.name}
        } join '.'
    )}
    _list: {(
        . open map {self.unit} join ' '
    )}
    _opstr: {switch(.
        #_add '+' #_sub '-' #_mul '*' #_div '/' #_pow '^' #_mod '%'
        #_eq '=' #_neq '!=' #_lt '<' #_gt '>' #_lteq '<=' #_gteq '>='
        #_cmp '<>'
        default {throw! 'unrecognised operator'}
    )}
    _c: $crayons
    cat(switch($u.kind
        #number {$u.value self.number}
        #symbol {$u.value self.symbol}
        #string {$u.value self.string}
        #oddball {$u.value self.oddball}
        #closure {'{' $u.sub _list '}'}
        #object {':{' $u.sub _list '}'}
        #callv {$u.value _chain _c.cyan}
        #getv {'$' $u.value _chain cat _c.red}
        #setv {'>' $u.value _chain cat _c.red}
        #bindv {'>>' $u.value _chain cat _c.red}
        #hasv {'?' $u.value _chain cat _c.red}
        #refv {'&' $u.value _chain cat _c.red}
        #prebind {$u.value _chain ':' cat _c.red ' ' $u.sub _list}
        #precall {$u.value _chain _c.cyan '(' $u.sub _list ')'}
        #precall_bare {$u.value _chain '!' cat _c.magenta ' ' $u.sub _list}
        #operator {$u.value _opstr _c.magenta ' ' $u.sub _list}
        #argument {'@' $u.value .name _c.yellow ' ' $u.sub _list}
        #group {'(' $u.sub _list ')'}
        #dots {$u.value repeat '.' cat _c.magenta}
        #then_else {(
            ?u.head then {'then' _c.magenta $u.head _list}
            ?u.tail then {'else' _c.magenta $u.tail _list} join ' ')}
        #until_do {(
            ?u.head then {'until' _c.magenta $u.head _list}
            ?u.tail then {'do' _c.magenta $u.tail _list} join ' ')}
        #special {$u.value .name _c.magenta ' ' $u.sub _list}
        #import {
            'import' _c.magenta $u.value _chain _c.red
            ?u.as then {'as' _c.magenta u.as.name _c.red} join ' '}
        #this {'this' _c.yellow}
        #sigbind {'<sigbind ' u.value.name '>' cat _c.faint}
        default {throw! 'unrecognised ast node kind'}
    ))
}

// todo: if passed a parent object (e.g. String or Argument) it will
//       call the visit method on it. is there any way to distinguish
//       the two?
// todo: somehow detect self-referential loops
crayons.rep: {
    dup ?._visit
        then {._visit($colorizer)}
        else {colorizer.context}
}

crayons.heatmap: {
    rainbow.get(. * 6 % 6 int) apply
}

_export: $crayons

?_main then {
    title: crayons.rainbow! 'Crayons'
    print('Welcome to ' $title '!' cat)
    print(
        $title ' is a ' crayons.yellow! 'module'
        ' to ' crayons.cyan! 'colorize'
        ' your ' crayons.magenta! 'text' '!' cat)
    
    print('You can use it to wrap your text like so:')
    print('> crayons.blue(\'helo wold!\') print')
    print(crayons.blue! 'helo wold!')
    
    print('\nExamples of different formatting below:')

    $crayons lsv
    // todo: fix filter and join
    excluding: list(#reset #rep #heatmap #bg)
    filter {excluding.contains not}
    sort map { k =>
        f: getv($crayons $k)
        f('crayons.' k.name cat)
        hasv($crayons.bg $k) then {
            f: getv($crayons.bg $k)
            f('crayons.bg.' k.name cat) crayons.black
            cat(.. '\t' swap)
        }
        print
    }
}
