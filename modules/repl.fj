import builtin
import crayons

print_stack: {
    map $crayons.rep empty else {join ' ' print}
}

Repl: :{}

// Creates a new repl, useful for simulating repl behaviour
Repl.new: {
    :{ context: (:{
        prev: {}
        import math
        import ds
    } as root) }
    as $Repl
}

// Push the contents of the stack from the previous evaluation
Repl.prev: { self.context.prev }

// Run a new repl using a custom function
// todo: should this just be defined on the module repl?
Repl.minirepl: { f =>
    print! crayons.faint! 'use ctrl-d to exit minirepl'
    line: nil
    until {
        prompt! '- ' >line
        $line is nil
    } do {
        $line builtin.addhist
        out: nil
        {list(f($line)) >out} catch $print
        $out then {print_stack($out open)}
    }
    print! ''
}

// Print exception nicely
// todo: parts of this should be a method on Exception but i dont want
//       dragon to depend on crayons
print_ex: { ex =>
    print(crayons.red! $ex.key ' ' $ex.message cat)
    (
        $ex.trace open
        size <= 2 then {print(crayons.faint! '(trace not available)')}
        else {
            pop pop
            map { t =>
                // todo: properly
                ?t.source then {print($t.source >>s
                    crayons.faint! '@ '
                    s.sub(0 $t.begin - 1)
                    crayons.bold! crayons.red! s.sub($t.begin - 1 $t.end - 1)
                    s.sub($t.end - 1 nil) cat
                )}
                else {print! crayons.faint! '(native code)'}
            }
        }
    )
}

// Evaluate a string of code within the current repl
// todo: ideally this shouldnt print directly?
//       how do we capture print output for bites?
Repl.eval: {
    ok: true
    $self.context $builtin.parse catch {
        // todo: parse needs to throw error properly
        false >ok
    }
    $ok then {
        out: nil ex: nil
        {list(. $self.context builtin.evalin) >out} catch {dup >ex}
        $out then {
            print_stack($out open)
            {$out open} >>self.context.prev
        } else {
            print_ex($ex)
            {$ex} >>self.context.prev
        }
    }
}

// Run the current repl with user input
Repl.run: {
    until {
        prompt! '> ' dup then {
            dup dup len > 0 then $builtin.addhist else $pop
            dup self.eval
        }
        not
    }
    print! ''
}

// Create a new Repl instance and export as module
_export: Repl.new()

// If this module is loaded as main, run repl delayed
// (we need to delay so that module is fully loaded first)
this >>repl
?_main then {{_export.run} >>repl._delay}
